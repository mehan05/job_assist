// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ROLE{
  COMPANY
  USER
}
model User{
  id Int @id @default(autoincrement())
  name String
  age Int
  headlines String @default("")
  bio String @default("")
  gender String
  place String
  role ROLE @default(USER)
  skills String[]
  dob DateTime @default(now())  
  email String @unique
  password String
  jobApplications JobApplication[]
  workapace WorkSpace[]  @relation("UserWorkSpace")
  createdWorkSpaces WorkSpace[] @relation("WorkSpaceOwners")
  analytics Analytic[]
  messagesSent Message[]  @relation("messageSender")
  messagesReceived Message[]  @relation("messageReceiver")
}

model JobApplication{
  id Int @id @default(autoincrement())
  title String
  company String
  status String
  notes String
  jobId Int
  userId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  job JobBoard @relation(fields: [jobId], references: [id])
  user User? @relation(fields: [userId]  , references: [id] ,onDelete: Cascade)
  
}

model WorkSpace{
  id Int @id @default(autoincrement())
  name String
  description String?
  createdById Int
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  members User[]  @relation("UserWorkSpace")
  isPublic Boolean
  owner User @relation("WorkSpaceOwners",fields: [createdById] ,references: [id])
  jobBoards JobBoard[]
}

model JobBoard{
  id Int @id @default(autoincrement())
  title String
  description String
  location String
  postById Int
  skillsRequired String[]
  concactEmail String
  applications JobApplication[]
  workSpaceId Int?
  workSpace WorkSpace? @relation(fields: [workSpaceId] , references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
} 

model Analytic{
  id Int @id @default(autoincrement())
  userId Int?
  applicationCount Int
  successCount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User? @relation(fields: [userId] ,references: [id])
} 

model Message{
  id Int @id @default(autoincrement())
  senderId Int
  receiverId Int
  message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender User? @relation("messageSender",fields: [senderId] ,references: [id])
  receiver User? @relation("messageReceiver",fields: [receiverId] ,references: [id])
}