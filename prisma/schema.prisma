// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum ROLE{
  COMPANY
  USER
}
model User{
  id String @id @default(uuid()) @db.Uuid
  name String
  age Int
  headlines String @default("")
  bio String @default("")
  gender String
  place String
  role ROLE @default(USER)
  skills String[] @default([])
  dob DateTime @default(now())  
  email String @unique
  password String
  jobApplications JobApplication[]
  workspace WorkSpace[]  @relation("UserWorkSpace")
  workspaceRequested WorkSpace[] @relation("WorkSpaceRequests")
  createdWorkSpaces WorkSpace[] @relation("WorkSpaceOwners")
  analytics Analytic[]
  workSpaceRequests workspaceRequestData[]

}

model JobApplication {
  id String @id @default(uuid()) @db.Uuid
  title String
  company String
  status String
  notes String
  jobId String @db.Uuid  
  userId String? @db.Uuid
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  job JobBoard @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model WorkSpace{
  id String @id @default(uuid()) @db.Uuid
  name String
  description String? 
  createdById String @db.Uuid
  createdBy String 
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  members User[]  @relation("UserWorkSpace")
  isPublic Boolean
  jobPosted Int @default(0)
  owner User @relation("WorkSpaceOwners",fields: [createdById] ,references: [id] , onDelete: Cascade)
  jobBoards JobBoard[]
  joinRequests Int @default(0)    
  requestedMembers User[] @relation("WorkSpaceRequests")
  category String[]
  workSpaceRequests workspaceRequestData[]
}

model JobBoard{
  id String @id @default(uuid()) @db.Uuid
  title String
  description String
  location String
  postById String @db.Uuid
  postBy String
  deadline DateTime
  skillsRequired String[]
  contactEmail String 
  applications JobApplication[]
  workSpaceId String @db.Uuid 
  salaryFrom Int
  salaryTo Int
  employmentType String
  workSpace WorkSpace? @relation(fields: [workSpaceId] , references: [id])
  createdAt DateTime @default(now())
  UpdatedAt DateTime  @updatedAt
} 

model Analytic{
  id String @id @default(uuid()) @db.Uuid
  userId String? @db.Uuid
  applicationCount Int
  successCount Int
  createdAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  user User? @relation(fields: [userId] ,references: [id])
} 

enum STATUS{
  REQUESTED
  ACCEPTED
  REJECTED
}
model workspaceRequestData {
   description String
   id String @id @default(uuid()) @db.Uuid
   requestedById String @db.Uuid
   requestedBy String
   createdAt DateTime @default(now())
   UpdatedAt DateTime @updatedAt
   workSpaceId String @db.Uuid
   skills String[]
   status STATUS @default(REQUESTED) 
   requestedByUser User @relation(fields: [requestedById] ,references: [id])
   workSpace WorkSpace @relation(fields: [workSpaceId] , references: [id])
}